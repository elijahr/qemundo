#!/bin/sh

# qemundo: easy virtual machine manager for qemu
#
# Usage: qemundo COMMAND [OPTIONS]
#
#   install [path]          Create a new virtual machine at path (default: <os>-<arch>)..
#     -o/--os <os>          Install this operating system (default: ubuntu-bionic)
#     -a/--arch <arch>      Emulate this architecture (default: arm64)
#     -s/--size <size>      The size of the disk image (default: 5G)
#     -m/--memory <memory>  The amount of memory to allocate (default: 512M)
#     -p/--cpus <count>     The number of processors (default: output of nproc)
#
#   clean                   Remove all cached ISOs and images
#   list                    Print supported build targets and exit
#   help                    Print this help message and exit
#
# Copyright (c) 2020 Elijah Shaw-Rutschman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

me=`basename "$0"`
dir="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
host=`uname -a`
cache="${HOME}/.cache/qemundo"

default_os=ubuntu-bionic
default_arch=arm64
default_size=5G
default_memory=512M
default_cpus=`nproc`

install () {
  cached_iso="${cache}/${os}-${arch}.iso"
  cached_disk="${cache}/${os}-${arch}.qcow2"
  disk="${build}/disk.qcow2"
  cached_firmware="${cache}/${arch}-firmware.qcow2"
  firmware="${build}/firmware.qcow2"

  case "${arch}" in
    arm64 ) prepare_arm64 ;;
    * )
      echo
      echo "Unsupported architecture ${arch}"
      supported_guests
      exit 1
      ;;
  esac

  case "${os}" in
    ubuntu-bionic|alpine-3|netbsd-9 )
      ;;
    * )
      echo
      echo "Unsupported operating system ${os}"
      supported_guests
      exit 1
      ;;
  esac

  if [ -d "${build}" ]; then
    read -p "Existing machine in ${build} will be overwritten. Are you sure? [y/N] " -n 1 -r
    echo
    if [[ ! "${REPLY}" =~ ^[Yy]$ ]]; then
      fail "Cancelled by user."
    fi
    rm -R "${build}"
  else
    test -f "${build}" && fail "${build} is a file, expected directory"
  fi

  mkdir -p "${build}"
  mkdir -p "${cache}"

  echo "Creating virtual machine at ${build}"

  install_qemu
  if [[ "${use_firmware}" == "1" ]]; then
    copy_firmware
  fi
  build_image
  write_run_sh

  echo
  echo "Created VM at ${build}"
  echo "Run this VM with:"
  echo
  echo "sh \"${build}/run.sh\""
  echo
}

install_qemu () {
  # Ensure qemu is installed
  if ! command -v "${qemu}" &> /dev/null
  then
    case $host in
      *ubuntu* | *debian* )
        apt-get update
        # TODO - specific qemu-system-* packages for other architectures
        apt-get install qemu-system-arm qemu-utils
        ;;
      *Darwin* )
        if command -v brew &> /dev/null
        then
          brew install qemu coreutils
        fi
        ;;
    esac
    if ! command -v "${qemu}" &> /dev/null
    then
      fail "${qemu} not found. Install qemu."
    fi
  fi
}

copy_firmware () {
  if [ ! -f "${cached_firmware}" ]; then
    if [ "${firmware_bz2_url}" != "" ]; then
      echo "Fetching firmware image ${firmware_bz2_url}..."
      cd ${cache}
      curl "${firmware_bz2_url}" -Lf > "${arch}-firmware.fd.bz2"
      bunzip2 "${arch}-firmware.fd.bz2"
      dd if=/dev/zero of="${arch}-firmware.img" bs=1048576 count=64 >/dev/null 2>&1
      dd if="${arch}-firmware.fd" of="${arch}-firmware.img" conv=notrunc >/dev/null 2>&1
      qemu-img convert -f raw -O qcow2 "${arch}-firmware.img" "${cached_firmware}"
      rm "${arch}-firmware.fd"
      rm "${arch}-firmware.img"
    fi
  fi
  if [ -f "${cached_firmware}" ]; then
    echo "Copying firmware ${cached_firmware}"
    cp "${cached_firmware}" "${firmware}"
  else
    fail "Bug in qemunod: no firmware"
  fi
}

build_image () {
  if [ "${iso_url}" != "" ]; then
    boot_iso
  elif [ "${gz_img_url}" != "" ]; then
    copy_gz_img
  else
    fail "Bug in qemundo: nothing to download."
  fi
}

boot_iso () {
  if [ ! -f "${cached_iso}" ]; then
    echo "Fetching ISO ${iso_url}..."
    mkdir -p ~/.cache/qemundo
    curl "${iso_url}" -Lf > "${cached_iso}"
  else
    echo "Using cached ISO ${cached_iso}"
  fi

  echo "Creating disk image ${disk} (${size})..."
  qemu-img create -f qcow2 "${disk}" "${size}" >/dev/null 2>&1

  echo "Booting from ISO..."
  sleep 5
  "${qemu}" \
    -nographic \
    -machine "${machine}" \
    -m "${memory}" \
    -cpu "${cpu}" \
    -smp "${cpus}" \
    -netdev user,id=vnet \
    -device virtio-net-pci,netdev=vnet \
    -drive "file=${disk},format=qcow2,if=none,id=drive0,cache=writeback" \
    -device virtio-blk,drive=drive0,bootindex=1 \
    -drive "file=${cached_iso},format=raw,if=none,id=drive1,cache=writeback" \
    -device virtio-blk,drive=drive1,bootindex=0 \
    -drive "file=${firmware},format=qcow2,if=pflash"
}

copy_gz_img () {
  if [ ! -f "${cached_disk}" ]; then
    echo "Fetching image ${gz_img_url}..."
    cached_raw="${cache}/${os}-${arch}.img"
    curl "${gz_img_url}" -Lf > "${cache}/${os}-${arch}.img.gz"
    gunzip --stdout "${GZ_IMG}" > "${cached_raw}"
    qemu-img convert -f raw -O qcow2 "${cached_raw}" "${cached_disk}"
    rm "${cached_raw}"
    echo "Cached image ${cached_disk}"
  else
    echo "Using cached image ${cached_disk}"
  fi
  echo "Resizing image to ${size}..."
  cp "${cached_disk}" "${disk}"
  qemu-img resize -f qcow2 "${disk}" "${size}"
}

prepare_arm64 () {
  use_firmware=1
  qemu=qemu-system-aarch64
  cpu=max
  machine=virt,gic-version=max
  firmware_bz2_url=https://raw.githubusercontent.com/qemu/qemu/3284aa128153750f14a61e8a96fd085e6f2999b6/pc-bios/edk2-aarch64-code.fd.bz2

  case $os in
    ubuntu-bionic )
      iso_url=http://ports.ubuntu.com/ubuntu-ports/dists/bionic-updates/main/installer-arm64/current/images/netboot/mini.iso
      ;;
    alpine-3 )
      iso_url=http://dl-cdn.alpinelinux.org/alpine/v3.12/releases/aarch64/alpine-standard-3.12.0-aarch64.iso
      ;;
    netbsd-9 )
      gz_img_url=http://nycdn.netbsd.org/pub/NetBSD-daily/netbsd-9/latest/evbarm-aarch64/binary/gzimg/arm64.img.gz
      cpu=cortex-a53
      machine=virt
      ;;
  esac
}

write_run_sh () {
  touch "${build}/run.sh"
  chmod +x "${build}/run.sh"
  if [[ "${use_firmware}" == "1" ]]; then
    firmware_device="-drive \"file=\${dir}/firmware.qcow2,format=qcow2,if=pflash\";"
  else
    firmware_device=";"
  fi
  cat <<EOF > "${build}/run.sh"
#!/bin/sh

dir="\$( cd "\$(dirname "\$0")" >/dev/null 2>&1 ; pwd -P )"

machine="${machine}"
cpu="${cpu}"
cpus="${cpus}"
memory="${memory}"
disk="\${dir}/disk.qcow2"

${qemu} \\
  -nographic \\
  -machine "\${machine}" \\
  -m "\${memory}" \\
  -cpu "\${cpu}" \\
  -smp "\${cpus}" \\
  -netdev user,id=net0,hostfwd=tcp::2222-:22 \\
  -device virtio-net-pci,netdev=net0 \\
  -drive "file=\${disk},format=qcow2,if=none,id=drive0,cache=writeback" \\
  -device virtio-blk,drive=drive0,bootindex=0 \\
  ${firmware_device}
EOF
}

usage () {
  echo
  echo "Usage: ${me} COMMAND [OPTIONS]"
  echo
  echo "  install                 Create a new virtual machine"
  echo "    [path]                Create the VM at this path (default: ./<os>-<arch>)"
  echo "    -o/--os <os>          Install this operating system (default: ${default_os})"
  echo "    -a/--arch <arch>      Emulate this architecture (default: ${default_arch})"
  echo "    -s/--size <size>      The size of the disk image (default: ${default_size})"
  echo "    -m/--memory <memory>  The amount of memory to allocate (default: ${default_memory})"
  echo "    -p/--cpus <count>     The number of processors (default: ${default_cpus})"
  echo
  echo "  clean                   Remove all cached ISOs and images"
  echo "  list                    Print supported build targets and exit"
  echo "  help                    Print this help message and exit"
  echo
}

supported_guests () {
  echo
  echo "Supported guests:"
  ech
  echo "  --os ubuntu-bionic   --arch arm64 # Ubuntu Bionic"
  echo "  --os alpine-3        --arch arm64 # Alpine Linux 3"
  echo "  --os netbsd-9        --arch arm64 # NetBSD 9"
  echo
  echo "Pull requests for additional guests are welcome."
  echo "https://github.com/elijahr/qemundo"
  echo
}

parse_install_args () {
  positional=()
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
      -a|--arch)
        arch="$2"; shift; shift;
        ;;
      -o|--os)
        os="$2"; shift; shift;
        ;;
      -s|--size)
        size="$2"; shift; shift;
        ;;
      -m|--memory)
        memory="$2"; shift; shift;
        ;;
      -p|--cpus)
        cpus="$2"; shift; shift;
        ;;
      -*)
        echo "Unknown option for install: $key"
        usage
        exit 1
        ;;
      *)
        positional+=("$1"); shift;
        ;;
    esac
  done

  if [[ "${arch}" == "" ]]; then
    arch=${default_arch}
  fi
  if [[ "${os}" == "" ]]; then
    os=${default_os}
  fi
  if [[ "${size}" == "" ]]; then
    size=${default_size}
  fi
  if [[ "${memory}" == "" ]]; then
    memory=${default_memory}
  fi
  if [[ "${cpus}" == "" ]]; then
    cpus=${default_cpus}
  fi

  test ${#positional[@]} -lt 2 || fail "install takes a single positional <path> argument, got ${#positional[@]}."

  if [ "${positional[0]}" == "" ]; then
    build=`realpath "${os}-${arch}"`
  else
    build=`realpath "${positional[0]}"`
  fi
}

main () {
  args=($@)
  cmd=${args[0]}
  case $cmd in
    install )
      parse_install_args "${args[@]:1}"
      install
      ;;
    clean )
      if [ -d "${cache}" ]; then
        rm -R ${cache}
        echo "Removed ${cache}"
      fi
      ;;
    list )
      supported_guests
      ;;
    help )
      echo "qemundo: easy virtual machine manager for qemu"
      usage
      ;;
    * )
      echo "Unknown command ${cmd}"
      usage
      exit 1
      ;;
  esac
}

fail () {
  echo $1
  exit 1
}

main $@
