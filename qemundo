#!/bin/sh

# qemundo: easy virtual machine manager for QEMU
#
# Usage: qemundo COMMAND [OPTIONS]
#
#   install <path>          Create a new virtual machine.
#     -a/--arch <arch>      Emulate this architecture. (arm64)
#     -o/--os <os>          Install this operating system. (netbsd-9)
#     -s/--size <size>      The size of the disk image. (5G)
#     -m/--memory <memory>  The amount of memory to allocate. (512M)
#     -p/--cpus <size>      The number of processors. (8)
#
#   list                    Print supported build targets.
#   help                    Print this help message and exit.
#
# Copyright (c) 2020 Elijah Shaw-Rutschman
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

ME=`basename "$0"`
DIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
HOST=`uname -a`
CACHE="${HOME}/.cache/qemundo"

DEFAULT_OS=netbsd-9
DEFAULT_ARCH=arm64
DEFAULT_SIZE=5G
DEFAULT_MEMORY=512M
DEFAULT_CPUS=`nproc`

install () {
  prepare_install

  case $ARCH in
    arm64 )
      prepare_arm64
      build_image
      write_arm64_run_sh
      ;;
  esac

  echo
  echo "Created VM at ${BUILD}"
  echo "Run this VM with:"
  echo
  echo "sh \"${BUILD}/run.sh\""
  echo
}

prepare_install () {
  # Validate guest
  case "${OS}" in
    netbsd-9|ubuntu-bionic|alpine-3 )
      ;;
    * )
      echo
      echo "Unsupported operating system ${OS}"
      supported_guests
      exit 1
      ;;
  esac
  case "${ARCH}" in
    arm64 )
      ;;
    * )
      echo
      echo "Unsupported architecture ${ARCH}"
      supported_guests
      exit 1
      ;;
  esac

  if [ -d "${BUILD}" ]; then
    read -p "Existing machine in ${BUILD} will be overwritten. Are you sure? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      fail "Cancelled by user."
    fi
    rm -R "${BUILD}"
  else
    test -f "${BUILD}" && fail "${BUILD} is a file, expected directory"
  fi

  mkdir -p "${BUILD}"
  mkdir -p "${CACHE}"

  NAME="$(basename "${BUILD}")"
  echo "Creating virtual machine ${NAME}"
}

build_image () {
  if [ "${ISO_URL}" != "" ]; then
    boot_iso
  elif [ "${GZ_IMG_URL}" != "" ]; then
    copy_gz_img
  else
    fail "Bug in qemundo: nothing to download."
  fi
}

boot_iso () {
  ISO="${CACHE}/${OS}-${ARCH}.iso"
  if [ ! -f "${ISO}" ]; then
    echo "Fetching ${OS} ISO..."
    mkdir -p ~/.cache/qemundo
    curl "${ISO_URL}" -Lf > "${ISO}"
  else
    echo "Using cached ISO"
  fi

  echo "Creating blank ${SIZE} disk image..."
  qemu-img create -f raw "${BUILD}/${OS}-${ARCH}.img" "${SIZE}" >/dev/null 2>&1

  echo "Booting from ISO..."
  qemu-system-aarch64 \
    -nographic \
    -machine "${MACHINE}" \
    -m "${MEMORY}" \
    -cpu "${CPU}" \
    -smp "${CPUS}" \
    -netdev user,id=vnet,hostfwd=:127.0.0.1:0-:22 \
    -device virtio-net-pci,netdev=vnet \
    -drive file="${BUILD}/${OS}-${ARCH}.img,if=none,id=drive0,cache=writeback" \
    -device virtio-blk,drive=drive0,bootindex=0 \
    -drive file="${ISO},if=none,id=drive1,cache=writeback" \
    -device virtio-blk,drive=drive1,bootindex=1 \
    -drive file="${BUILD}/pflash.img,format=raw,if=pflash"
}

copy_gz_img () {
  GZ_IMG="${CACHE}/${OS}-${ARCH}.img.gz"
  if [ ! -f "${GZ_IMG}" ]; then
    echo "Fetching ${OS}-${ARCH} image..."
    curl "${GZ_IMG_URL}" -Lf > "${GZ_IMG}"
  else
    echo "Using cached ${OS}-${ARCH} image"
  fi

  IMG="${BUILD}/${OS}-${ARCH}.img"
  gunzip --stdout "${GZ_IMG}" > "${IMG}"

  echo "Resizing image to ${SIZE}..."
  qemu-img resize -f raw "${IMG}" "${SIZE}"
}

prepare_arm64 () {
  # Ensure qemu-system-aarch64 is installed
  if ! command -v qemu-system-aarch64 &> /dev/null
  then
    case $HOST in
      *ubuntu* | *debian* )
        apt-get update
        apt-get install qemu-system-arm qemu-efi-aarch64 qemu-utils
        ;;
      *Darwin* )
        if command -v brew &> /dev/null
        then
          brew install qemu coreutils
        fi
        ;;
    esac
    if ! command -v qemu-system-aarch64 &> /dev/null
    then
      fail "qemu-system-aarch64 not found. Install qemu."
    fi
  fi

  CPU=max
  MACHINE=virt,gic-version=max
  case $OS in
    ubuntu-bionic )
      ISO_URL=http://ports.ubuntu.com/ubuntu-ports/dists/bionic-updates/main/installer-arm64/current/images/netboot/mini.iso
      ;;
    netbsd-9 )
      GZ_IMG_URL=http://nycdn.netbsd.org/pub/NetBSD-daily/netbsd-9/latest/evbarm-aarch64/binary/gzimg/arm64.img.gz
      CPU=cortex-a53
      MACHINE=virt
      ;;
    alpine-3 )
      ISO_URL=http://dl-cdn.alpinelinux.org/alpine/v3.12/releases/aarch64/alpine-standard-3.12.0-aarch64.iso
      ;;
  esac

  # Ensure firmware exists
  EFI="${CACHE}/edk2-aarch64-code.fd"
  if [ ! -f "${EFI}" ]; then
    case $HOST in
      *ubuntu* | *debian* )
        cp /usr/share/qemu-efi-aarch64/QEMU_EFI.fd "${EFI}"
        ;;
      *Darwin* )
        cp /usr/local/opt/qemu/share/qemu/edk2-aarch64-code.fd "${EFI}"
        ;;
      * )
        echo "Fetching firmware image..."
        curl https://raw.githubusercontent.com/qemu/qemu/3284aa128153750f14a61e8a96fd085e6f2999b6/pc-bios/edk2-aarch64-code.fd.bz2 -Lf > "${CACHE}/edk2-aarch64-code.fd.bz2"
        cd ${CACHE}
        bunzip2 edk2-aarch64-code.fd.bz2
        ;;
    esac
  fi
  echo "Copying firmware image..."
  dd if=/dev/zero of="${BUILD}/pflash.img" bs=1048576 count=64 >/dev/null 2>&1
  dd if="${EFI}" of="${BUILD}/pflash.img" conv=notrunc >/dev/null 2>&1
  rm "${EFI}"
}

write_arm64_run_sh () {
  touch "${BUILD}/run.sh"
  chmod +x "${BUILD}/run.sh"
  cat <<EOF > "${BUILD}/run.sh"
#!/bin/sh

DIR="\$( cd "\$(dirname "\$0")" >/dev/null 2>&1 ; pwd -P )"

CPU="${CPU}"
CPUS="${CPUS}"
MEMORY="${MEMORY}"
IMG="\${DIR}/${OS}-${ARCH}.img"
PFLASH="\${DIR}/pflash.img"

qemu-system-aarch64 \\
  -nographic \\
  -machine ${MACHINE} \\
  -m "\${MEMORY}" \\
  -cpu "\${CPU}" \\
  -smp "\${CPUS}" \\
  -netdev user,id=vnet,hostfwd=:127.0.0.1:0-:22 \\
  -device virtio-net-pci,netdev=vnet \\
  -drive file="\${IMG},if=none,id=drive0,cache=writeback" \\
  -device virtio-blk,drive=drive0,bootindex=0 \\
  -drive file="\${PFLASH},format=raw,if=pflash"
EOF
}

parse_install_args () {
  POSITIONAL=()
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
      -a|--arch)
        ARCH="$2"; shift; shift;
        ;;
      -o|--os)
        OS="$2"; shift; shift;
        ;;
      -s|--size)
        SIZE="$2"; shift; shift;
        ;;
      -m|--memory)
        MEMORY="$2"; shift; shift;
        ;;
      -p|--cpus)
        CPUS="$2"; shift; shift;
        ;;
      -*)
        echo "Unknown option for install: $key"
        usage
        exit 1
        ;;
      *)
        POSITIONAL+=("$1"); shift;
        ;;
    esac
  done

  if [[ "${ARCH}" == "" ]]; then
    ARCH=${DEFAULT_ARCH}
  fi
  if [[ "${OS}" == "" ]]; then
    OS=${DEFAULT_OS}
  fi
  if [[ "${SIZE}" == "" ]]; then
    SIZE=${DEFAULT_SIZE}
  fi
  if [[ "${MEMORY}" == "" ]]; then
    MEMORY=${DEFAULT_MEMORY}
  fi
  if [[ "${CPUS}" == "" ]]; then
    CPUS=${DEFAULT_CPUS}
  fi

  test ${#POSITIONAL[@]} -lt 2 || fail "install takes a single positional <path> argument, got ${#POSITIONAL[@]}."

  if [ "${POSITIONAL[0]}" == "" ]; then
    BUILD=`realpath "${OS}-${ARCH}"`
  else
    BUILD=`realpath "${POSITIONAL[0]}"`
  fi
}

usage () {
  echo
  echo "Usage: ${ME} COMMAND [OPTIONS]"
  echo
  echo "  install [path]          Create a new virtual machine at path (default: <os>-<arch>).."
  echo "    -o/--os <os>          Install this operating system. (default: ${DEFAULT_OS})"
  echo "    -a/--arch <arch>      Emulate this architecture. (default: ${DEFAULT_ARCH})"
  echo "    -s/--size <size>      The size of the disk image. (default: ${DEFAULT_SIZE})"
  echo "    -m/--memory <memory>  The amount of memory to allocate. (default: ${DEFAULT_MEMORY})"
  echo "    -p/--cpus <count>     The number of processors. (default: ${DEFAULT_CPUS})"
  echo
  echo "  clean                   Remove all cached ISOs and images."
  echo "  list                    Print supported build targets and exit."
  echo "  help                    Print this help message and exit."
  echo
}

supported_guests () {
  echo
  echo "Supported guests:"
  echo
  echo "  --os netbsd-9        --arch arm64"
  echo "  --os ubuntu-bionic   --arch arm64"
  echo "  --os alpine-3        --arch arm64"
  echo
  echo "Pull requests for additional guests are welcome."
  echo "https://github.com/elijahr/qemundo"
  echo
}

main () {
  args=($@)
  cmd=${args[0]}
  case $cmd in
    install )
      parse_install_args "${args[@]:1}"
      install
      ;;
    clean )
      if [ -d "${CACHE}" ]; then
        rm -R ${CACHE}
        echo "Removed ${CACHE}"
      fi
      ;;
    list )
      supported_guests
      ;;
    help )
      echo "qemundo: easy virtual machine manager for QEMU"
      usage
      ;;
    * )
      echo "Unknown command ${cmd}"
      usage
      exit 1
      ;;
  esac
}

fail () {
  echo $1
  exit 1
}

main $@